!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/null/Documents/better_ray_tracer/libft/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/653ca9204/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(NAME)	Makefile	/^$(NAME): $(OBJS)$/;"	t
%.o	Makefile	/^%.o: %.c$/;"	t
AR	Makefile	/^AR = ar rcs$/;"	m
BUFFER_SIZE	get_next_line.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -g3$/;"	m
CHAR	libft.h	/^# define CHAR	/;"	d
DEC	libft.h	/^# define DEC	/;"	d
GET_NEXT_LINE_H	get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
HEXLO	libft.h	/^# define HEXLO /;"	d
HEXUP	libft.h	/^# define HEXUP /;"	d
LIBFT_H	libft.h	/^# define LIBFT_H$/;"	d
NAME	Makefile	/^NAME = libft.a$/;"	m
OBJS	Makefile	/^OBJS = ft_calloc.o   ft_isascii.o  ft_itoa.o    ft_memcpy.o   ft_putchar_fd.o  ft_putstr_fd.o  f/;"	m
RM	Makefile	/^RM = rm -f$/;"	m
SRCS	Makefile	/^SRCS = ft_calloc.c   ft_isascii.c  ft_itoa.c    ft_memcpy.c   ft_putchar_fd.c  ft_putstr_fd.c  f/;"	m
STR	libft.h	/^# define STR	/;"	d
all	Makefile	/^all: $(NAME)$/;"	t
base	libft.h	/^	int			base;$/;"	m	struct:s_info	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
count_word	ft_split.c	/^static size_t	count_word(char	*str, char c)$/;"	f	typeref:typename:size_t	file:
counter	libft.h	/^	size_t		counter;$/;"	m	struct:s_info	typeref:typename:size_t
divisor	ft_split.c	/^static char	**divisor(char *str1, char c, char **array, size_t len)$/;"	f	typeref:typename:char **	file:
fclean	Makefile	/^fclean: clean$/;"	t
fd	libft.h	/^	int			fd;$/;"	m	struct:s_info	typeref:typename:int
format	printf_fd.c	/^static int	format(const char *str, t_info *info, va_list *args)$/;"	f	typeref:typename:int	file:
free_array	ft_split.c	/^static void	free_array(char **s1)$/;"	f	typeref:typename:void	file:
ft_atoi	ft_atoi.c	/^int	ft_atoi(const char *text)$/;"	f	typeref:typename:int
ft_bzero	ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	ft_calloc.c	/^void	*ft_calloc(size_t n, size_t size)$/;"	f	typeref:typename:void *
ft_fsign	ft_atoi.c	/^static int	ft_fsign(char c)$/;"	f	typeref:typename:int	file:
ft_is_space	ft_is_space.c	/^int	ft_is_space(char c)$/;"	f	typeref:typename:int
ft_isalnum	ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_isspace	ft_atoi.c	/^static int	ft_isspace(char c)$/;"	f	typeref:typename:int	file:
ft_itoa	ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_memchr	ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_n_digit	ft_itoa.c	/^static int	ft_n_digit(int n)$/;"	f	typeref:typename:int	file:
ft_n_digit	ft_putnbr_fd.c	/^static int	ft_n_digit(int n)$/;"	f	typeref:typename:int	file:
ft_pow	ft_itoa.c	/^static int	ft_pow(int n)$/;"	f	typeref:typename:int	file:
ft_pow	ft_putnbr_fd.c	/^static int	ft_pow(int n)$/;"	f	typeref:typename:int	file:
ft_putchar_fd	ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr_fd	ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr_fd	ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_set_digit	ft_itoa.c	/^static void	ft_set_digit(long nbr_digit, long index, char *nbr, long n)$/;"	f	typeref:typename:void	file:
ft_set_digit	ft_putnbr_fd.c	/^static void	ft_set_digit(long nbr_digit, long n, int fd)$/;"	f	typeref:typename:void	file:
ft_set_number	ft_itoa.c	/^static void	ft_set_number(char *tab)$/;"	f	typeref:typename:void	file:
ft_set_number	ft_putnbr_fd.c	/^static void	ft_set_number(char *tab)$/;"	f	typeref:typename:void	file:
ft_split	ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f	typeref:typename:char *
ft_striteri	ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void
ft_strjoin	ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	ft_strlen.c	/^size_t	ft_strlen(const char *c)$/;"	f	typeref:typename:size_t
ft_strmapi	ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strtod	ft_strtod.c	/^double	ft_strtod(char *string)$/;"	f	typeref:typename:double
ft_strtrim	ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
get_next_line	gnl.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
gnl_ft_getline	gnl.c	/^char	*gnl_ft_getline(char *static_str)$/;"	f	typeref:typename:char *
gnl_ft_remove_bn	gnl.c	/^char	*gnl_ft_remove_bn(char *static_str)$/;"	f	typeref:typename:char *
gnl_ft_strchr	gnl_utils.c	/^char	*gnl_ft_strchr(char *s, int c)$/;"	f	typeref:typename:char *
gnl_ft_strjoin	gnl_utils.c	/^char	*gnl_ft_strjoin(char *s1, char *s2)$/;"	f	typeref:typename:char *
gnl_ft_strlen	gnl_utils.c	/^size_t	gnl_ft_strlen(char *s)$/;"	f	typeref:typename:size_t
gnl_read_fd	gnl.c	/^char	*gnl_read_fd(int fd, char *str)$/;"	f	typeref:typename:char *
i	libft.h	/^	size_t		i;$/;"	m	struct:s_info	typeref:typename:size_t
len_word	ft_split.c	/^static size_t	len_word(char *s, char c, size_t start)$/;"	f	typeref:typename:size_t	file:
partie_entiere	ft_strtod.c	/^static int	partie_entiere(double *entier, char *string, int i, double *sign)$/;"	f	typeref:typename:int	file:
printf_fd	printf_fd.c	/^int	printf_fd(int fd, const char *str, ...)$/;"	f	typeref:typename:int
putnbr_b	printf_fd.c	/^static int	putnbr_b(t_lu n, char *str, int numdig, t_info *info)$/;"	f	typeref:typename:int	file:
putstr	printf_fd.c	/^static int	putstr(char *str, char c, int is_char, t_info *info)$/;"	f	typeref:typename:int	file:
re	Makefile	/^re: fclean all$/;"	t
s_info	libft.h	/^struct s_info$/;"	s
t_info	libft.h	/^typedef struct s_info		t_info;$/;"	t	typeref:struct:s_info
t_lu	libft.h	/^typedef unsigned long		t_lu;$/;"	t	typeref:typename:unsigned long
t_ui	libft.h	/^typedef unsigned int		t_ui;$/;"	t	typeref:typename:unsigned int
treat_int	printf_fd.c	/^static int	treat_int(int n, char *str, int numdig, t_info *info)$/;"	f	typeref:typename:int	file:
